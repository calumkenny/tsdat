#---------------------------------------------
# Dockerfile to pre-package tsdat requirements
# for aws lambda container.  Because tsdat
# prequisites can be difficult to install (in
# particular, the cartopy dependency for
# act-atmos), we are using a multi-stage build
# that can leverage a conda environment without
# including it in the final product.
#---------------------------------------------

# Anaconda & AWS lambda docker references
#https://pythonspeed.com/articles/activate-conda-dockerfile/
#https://medium.com/@chadlagore/conda-environments-with-docker-82cdc9d25754
#https://hichaelmart.medium.com/using-container-images-with-aws-lambda-7ffbd23697f1
#https://docs.aws.amazon.com/lambda/latest/dg/images-test.html#images-test-alternative
#https://docs.aws.amazon.com/lambda/latest/dg/images-create.html
#https://pythonspeed.com/articles/conda-docker-image-size/

# Destination directory where the lambda
# function dependencies get installed
ARG LAMBDA_DIR="/var/task/"

# Multi-stage build: use the miniconda image just to build our dependencies
FROM continuumio/miniconda3 as build-image
RUN conda create -n tsdat_env -c conda-forge python=3.8 act-atmos cfunits yamllint

# Pip install tsdat to our environment folder
COPY tsdat /tmp
RUN conda run -n tsdat_env pip install /tmp/tsdat
RUN conda run -n tsdat_env pip install awslambdaric

# Install conda-pack so we can extract the conda libs to a folder:
# https://pythonspeed.com/articles/conda-docker-image-size/
RUN conda install -c conda-forge conda-pack

# Use conda-pack to create a standalone environment in /venv:
RUN conda-pack -n tsdat_env -o /tmp/env.tar && \
  mkdir ${LAMBDA_DIR} && cd ${LAMBDA_DIR} && tar xf /tmp/env.tar && \
  rm /tmp/env.tar
RUN ${LAMBDA_DIR}/bin/conda-unpack

# Multi-stage build: use the amazon linux image as our base
FROM amazonlinux

# Copy in the build image dependencies
COPY --from=build-image ${LAMBDA_DIR} ${LAMBDA_DIR}

# Set environment variables (copied from  public.ecr.aws/lambda/python:3.8 image)
ENV LANG=en_US.UTF-8
ENV TZ=:/etc/localtime
ENV LAMBDA_TASK_ROOT=/var/task

# Make RUN commands use the new environment:
SHELL ["conda", "run", "-n", "tsdat_env", "/bin/bash", "-c"]

ENTRYPOINT ["conda", "run", "--no-capture-output", "-n", "tsdat_env", "python", "-m", "awslambdaric"]

# Clients would have to install their package into the anaconda environment
CMD [ "app.handler" ]


